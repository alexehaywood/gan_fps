ylab('AUC Diff')
p6 <- ggplot(data = dat_graph %>% filter(class_imbalance == 0.6, experiment == 'microarray', !(method == 'ClassicExpand'), !(method == 'ClassicGAN')))+
geom_boxplot(aes(x = n_control, upper = (auc_mean + auc_sd) - 0.5, lower = (auc_mean - auc_sd) - 0.5, middle = auc_mean-0.5,
ymax = (auc_mean + auc_sd) - 0.5, ymin = (auc_mean - auc_sd) - 0.5,
group = interaction(n_control, alpha1, alpha2, method), col = method),
fill = 'white', position = position_dodge2(preserve = 'total', padding = 0.15), stat = 'identity', size = size) +
geom_hline(yintercept = 0, linetype = 'dashed', col = 'red', alpha = 0.6) +
scale_y_continuous(limits=c(-0.1,0.4),oob = scales::rescale_none) +
ggtitle('class_imbalance = 0.6') +
ylab('AUC Diff')
p1+p2+p3 + guide_area() + plot_layout(ncol = 2, guides = 'collect')
ggsave("Submit/Figure_3.jpeg", device="jpeg")
p4+p5+p6 + guide_area() + plot_layout(ncol = 2, guides = 'collect')
ggsave("Submit/Figure_4.jpeg", device="jpeg")
###Summary Table
library(gt)
colnames(dat_graph)
dat_table <- dat_graph %>%
select(-classifier, -hyp, -mean_accuracy) %>%
group_by(experiment, method, n_control, class_imbalance) %>%
arrange(desc(auc_mean)) %>%
slice_head(n=1) %>%
ungroup() %>%
select(-alpha1, -alpha2)
dat_table <- dat_table %>%
pivot_wider(names_from = experiment, values_from = c(auc_mean, auc_sd))
x <- dat_table %>%
select(method, class_imbalance, n_control, auc_mean_microarray, auc_sd_microarray, auc_mean_sim, auc_sd_sim) %>%
mutate(across(where(is.numeric), \(x) round(x, 2))) %>%
gt(groupname_col = 'method') %>%
tab_header(title = md('**Summary**')) %>%
tab_spanner(label = 'Microarray', columns = c(auc_mean_microarray, auc_sd_microarray)) %>%
tab_spanner(label = 'Simulation', columns = c(auc_mean_sim, auc_sd_sim)) %>%
#cols_width(Attribute ~ px(80), starts_with('percent') ~ px(50), everything() ~ px(70)) %>%
data_color(c(auc_mean_microarray,
auc_mean_sim), colors = scales::col_numeric( domain = c(0.5, 0.9),
palette = as.character(paletteer::paletteer_d(
palette='RColorBrewer::Blues')))) %>%
data_color(c(auc_sd_microarray,
auc_sd_sim), colors = scales::col_numeric( domain = c(0, 0.2),
palette = as.character(paletteer::paletteer_d(
palette='RColorBrewer::Blues')))) %>%
cols_label(auc_mean_microarray = 'Mean_AUC', auc_mean_sim = 'Mean_AUC',
auc_sd_microarray = 'sd', auc_sd_sim = 'sd') %>%
tab_options(row_group.border.top.width = '3.5px',
table.font.size = 15) %>%
cols_align(align = 'right') %>%
tab_options(data_row.padding = px(0))
x
gtsave(x, "Submit/Supp_Table_1.html", inline_css=TRUE)
webshot::webshot('Submit/Supp_Table_1.html', 'Supp_Table_1.png', delay = 0.5)
x <- dat_table %>% select(method, class_imbalance, n_control, auc_mean_microarray, auc_sd_microarray, auc_mean_sim, auc_sd_sim)
length(which(x$auc_mean_microarray >= 0.6)) / nrow(x)
size <- 2
dat_x <- dat_graph %>%
select(-classifier, -hyp, -mean_accuracy) %>%
group_by(experiment, method, n_control, class_imbalance) %>%
arrange(desc(auc_mean)) %>%
slice_head(n=1) %>%
ungroup() %>%
select(-alpha1, -alpha2)
p4 <- ggplot(data = dat_x %>% filter(n_control == 40, experiment == 'microarray', !(method == 'ClassicExpand'), !(method == 'ClassicGAN') ))+
geom_point(aes(x = class_imbalance, y = auc_mean-0.5,
group = method, col = method),
fill = 'white', stat = 'identity',
size = size, alpha = 0.8) +
geom_line(aes(x = class_imbalance, y = auc_mean-0.5,
group = method, col = method),
size = 0.8, linetype = 'solid', alpha = 0.6) +
geom_errorbar(aes(x = class_imbalance, ymax = (auc_mean + auc_sd) - 0.5, ymin = (auc_mean - auc_sd) - 0.5,
group = method, col = method),
fill = 'white', position = position_dodge2(preserve = 'total', padding = 0.15), stat = 'identity', size = 0.4) +
geom_hline(yintercept = 0, linetype = 'dashed', col = 'red', alpha = 0.6) +
scale_y_continuous(limits=c(-0.1,0.4),oob = scales::rescale_none) +
ggtitle('n_control = 40') +
ylab('AUC Diff')
p5 <- ggplot(data = dat_x %>% filter(n_control == 80, experiment == 'microarray', !(method == 'ClassicExpand'), !(method == 'ClassicGAN') ))+
geom_point(aes(x = class_imbalance, y = auc_mean-0.5,
group = method, col = method),
fill = 'white', stat = 'identity',
size = size, alpha = 0.8) +
geom_line(aes(x = class_imbalance, y = auc_mean-0.5,
group = method, col = method),
size = 0.8, linetype = 'solid', alpha = 0.6) +
geom_errorbar(aes(x = class_imbalance, ymax = (auc_mean + auc_sd) - 0.5, ymin = (auc_mean - auc_sd) - 0.5,
group = method, col = method),
fill = 'white', position = position_dodge2(preserve = 'total', padding = 0.15), stat = 'identity', size = 0.4) +
geom_hline(yintercept = 0, linetype = 'dashed', col = 'red', alpha = 0.6) +
scale_y_continuous(limits=c(-0.1,0.4),oob = scales::rescale_none) +
ggtitle('n_control = 80') +
ylab('AUC Diff')
p6 <- ggplot(data = dat_x %>% filter(n_control == 120, experiment == 'microarray', !(method == 'ClassicExpand'), !(method == 'ClassicGAN') ))+
geom_point(aes(x = class_imbalance, y = auc_mean-0.5,
group = method, col = method),
fill = 'white', stat = 'identity',
size = size, alpha = 0.8) +
geom_line(aes(x = class_imbalance, y = auc_mean-0.5,
group = method, col = method),
size = 0.8, linetype = 'solid', alpha = 0.6) +
geom_errorbar(aes(x = class_imbalance, ymax = (auc_mean + auc_sd) - 0.5, ymin = (auc_mean - auc_sd) - 0.5,
group = method, col = method),
fill = 'white', position = position_dodge2(preserve = 'total', padding = 0.15), stat = 'identity', size = 0.4) +
geom_hline(yintercept = 0, linetype = 'dashed', col = 'red', alpha = 0.6) +
scale_y_continuous(limits=c(-0.1,0.4),oob = scales::rescale_none) +
ggtitle('n_control = 120') +
ylab('AUC Diff')
p4+p5+p6 + guide_area() + plot_layout(ncol = 2, guides = 'collect')
ggsave("Submit/Figure_4_2.jpeg", device="jpeg")
size <- 0.5
p4 <- ggplot(data = dat_x %>% filter(class_imbalance == 0.4, experiment == 'microarray', method %in% c('GAN', 'ExpandGAN', 'ClassicGAN', 'ClassicExpand') ))+
geom_boxplot(aes(x = n_control, upper = (auc_mean + auc_sd) - 0.5, lower = (auc_mean - auc_sd) - 0.5, middle = auc_mean-0.5,
ymax = (auc_mean + auc_sd) - 0.5, ymin = (auc_mean - auc_sd) - 0.5,
group = interaction(n_control, method), col = method),
fill = 'white', position = position_dodge2(preserve = 'total', padding = 0.15), stat = 'identity', size = size) +
geom_hline(yintercept = 0, linetype = 'dashed', col = 'red', alpha = 0.6) +
scale_y_continuous(limits=c(-0.1,0.4),oob = scales::rescale_none) +
ggtitle('class_imbalance = 0.4') +
ylab('AUC Diff')
p5 <- ggplot(data = dat_x %>% filter(class_imbalance == 0.5, experiment == 'microarray', method %in% c('GAN', 'ExpandGAN', 'ClassicGAN', 'ClassicExpand')))+
geom_boxplot(aes(x = n_control, upper = (auc_mean + auc_sd) - 0.5, lower = (auc_mean - auc_sd) - 0.5, middle = auc_mean-0.5,
ymax = (auc_mean + auc_sd) - 0.5, ymin = (auc_mean - auc_sd) - 0.5,
group = interaction(n_control, method), col = method),
fill = 'white', position = position_dodge2(preserve = 'total', padding = 0.15), stat = 'identity', size = size) +
geom_hline(yintercept = 0, linetype = 'dashed', col = 'red', alpha = 0.6) +
scale_y_continuous(limits=c(-0.1,0.4),oob = scales::rescale_none) +
ggtitle('class_imbalance = 0.5') +
ylab('AUC Diff')
p6 <- ggplot(data = dat_x %>% filter(class_imbalance == 0.6, experiment == 'microarray', method %in% c('GAN', 'ExpandGAN', 'ClassicGAN', 'ClassicExpand')))+
geom_boxplot(aes(x = n_control, upper = (auc_mean + auc_sd) - 0.5, lower = (auc_mean - auc_sd) - 0.5, middle = auc_mean-0.5,
ymax = (auc_mean + auc_sd) - 0.5, ymin = (auc_mean - auc_sd) - 0.5,
group = interaction(n_control, method), col = method),
fill = 'white', position = position_dodge2(preserve = 'total', padding = 0.15), stat = 'identity', size = size) +
geom_hline(yintercept = 0, linetype = 'dashed', col = 'red', alpha = 0.6) +
scale_y_continuous(limits=c(-0.1,0.4),oob = scales::rescale_none) +
ggtitle('class_imbalance = 0.6') +
ylab('AUC Diff')
p4+p5+p6 + guide_area() + plot_layout(ncol = 2, guides = 'collect')
ggsave("Submit/Figure_5.jpeg", device="jpeg")
setwd("~/Documents/GAN_Paper/Code/gitrepo/Microarray_lasso/")
features <- readxl::read_xlsx("List of selected genes from GSE36376.xlsx")
View(features)
features <- readxl::read_xlsx("List of selected genes from GSE36376.xlsx") %>%
unlist() %>%
unname()
library(tidyverse)
library(GEOquery)
library(foreach)
library(doParallel)
features <- readxl::read_xlsx("List of selected genes from GSE36376.xlsx") %>%
unlist() %>%
unname()
features <- readxl::read_xlsx("List of selected genes from GSE36376.xlsx") %>%
unlist() %>%
unname() %>%
tolower()
rm_features <- c("RGCC", "CDHR2", "NAXE", "DDX39A", "GARS1", "EPRS1", "UQCC2",
"hspb1", "akr1c3", "gba", "tomm6",
"rbm42", "hspb1", "phpt1", "spns1", "dcaf7", "prickle4", "dnajb11", "fat1", "gba", "med20", "srxn1", "irx3", "tomm6") %>%
tolower()
features <- features(which(features %in% rm_features))
features <- features(features %in% rm_features)
features <- features[which(features %in% rm_features)]
features <- readxl::read_xlsx("List of selected genes from GSE36376.xlsx") %>%
unlist() %>%
unname() %>%
tolower()
rm_features <- c("RGCC", "CDHR2", "NAXE", "DDX39A", "GARS1", "EPRS1", "UQCC2",
"hspb1", "akr1c3", "gba", "tomm6",
"rbm42", "hspb1", "phpt1", "spns1", "dcaf7", "prickle4", "dnajb11", "fat1", "gba", "med20", "srxn1", "irx3", "tomm6") %>%
tolower()
features <- features[which(features %in% rm_features)]
source("~/Documents/GAN_Paper/Code/gitrepo/Microarray_lasso/Hepatocellular Carcinoma Prepare.R", echo=TRUE)
source("~/Documents/GAN_Paper/Code/gitrepo/Microarray_lasso/Hepatocellular Carcinoma Prepare.R", echo=TRUE)
debugSource("~/Documents/GAN_Paper/Code/gitrepo/Microarray_lasso/Hepatocellular Carcinoma Prepare.R", echo=TRUE)
debugSource("~/Documents/GAN_Paper/Code/gitrepo/Microarray_lasso/Hepatocellular Carcinoma Prepare.R", echo=TRUE)
features <- readxl::read_xlsx("List of selected genes from GSE36376.xlsx") %>%
unlist() %>%
unname() %>%
tolower()
rm_features <- c("RGCC", "CDHR2", "NAXE", "DDX39A", "GARS1", "EPRS1", "UQCC2",
"hspb1", "akr1c3", "gba", "tomm6",
"rbm42", "hspb1", "phpt1", "spns1", "dcaf7", "prickle4", "dnajb11", "fat1", "gba", "med20", "srxn1", "irx3", "tomm6") %>%
tolower()
features <- features[which(features %in% rm_features)]
debugSource("~/Documents/GAN_Paper/Code/gitrepo/Microarray_lasso/Hepatocellular Carcinoma Prepare.R", echo=TRUE)
features
length(features) - length(which( features %in% tolower(as.vector(dat_exp[1])[[1]]) )
)
length(features) - length(which( features %in% tolower(as.vector(dat_exp[1])[[1]]) )
features %in% tolower(as.vector(dat_exp[1])[[1]])
tolower(as.vector(dat_exp[1])[[1]])
tolower(as.vector(dat_exp[1])[[1]])
which( features %in% tolower(as.vector(dat_exp[1])[[1]]) )
source("~/Documents/GAN_Paper/Code/gitrepo/Microarray_lasso/Hepatocellular Carcinoma Prepare.R", echo=TRUE)
source("~/Documents/GAN_Paper/Code/gitrepo/Microarray_lasso/Hepatocellular Carcinoma Prepare.R", echo=TRUE)
source("~/Documents/GAN_Paper/Code/gitrepo/Microarray_lasso/Hepatocellular Carcinoma Prepare.R", echo=TRUE)
debugSource("~/Documents/GAN_Paper/Code/gitrepo/Microarray_lasso/Hepatocellular Carcinoma Prepare.R", echo=TRUE)
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
features
features <- readxl::read_xlsx("List of selected genes from GSE36376.xlsx") %>%
unlist() %>%
unname() %>%
tolower()
features
debugSource("~/Documents/GAN_Paper/Code/gitrepo/Microarray_lasso/Hepatocellular Carcinoma Prepare.R", echo=TRUE)
source("~/Documents/GAN_Paper/Code/gitrepo/Microarray_lasso/Hepatocellular Carcinoma Prepare.R", echo=TRUE)
source("~/Documents/GAN_Paper/Code/gitrepo/Microarray_lasso/Hepatocellular Carcinoma Prepare.R", echo=TRUE)
source("~/Documents/GAN_Paper/Code/gitrepo/Microarray_lasso/Hepatocellular Carcinoma Prepare.R", echo=TRUE)
source("~/Documents/GAN_Paper/Code/gitrepo/Microarray_lasso/Hepatocellular Carcinoma Prepare.R", echo=TRUE)
source("~/Documents/GAN_Paper/Code/gitrepo/Microarray_lasso/Hepatocellular Carcinoma Prepare.R", echo=TRUE)
source("~/Documents/GAN_Paper/Code/gitrepo/Microarray_lasso/Hepatocellular Carcinoma Prepare.R", echo=TRUE)
debugSource("~/Documents/GAN_Paper/Code/gitrepo/Microarray_lasso/Hepatocellular Carcinoma Prepare.R", echo=TRUE)
features[!(features %in% tolower(as.vector(dat_exp[1])[[1]]) )]
features
features <- readxl::read_xlsx("List of selected genes from GSE36376.xlsx") %>%
unlist() %>%
unname() %>%
tolower()
rm_features <- c("RGCC", "CDHR2", "NAXE", "DDX39A", "GARS1", "EPRS1", "UQCC2",
"hspb1", "akr1c3", "gba", "tomm6",
"rbm42", "hspb1", "phpt1", "spns1", "dcaf7", "prickle4", "dnajb11", "fat1", "gba", "med20", "srxn1", "irx3", "tomm6") %>%
tolower()
features <- features[which(features %in% rm_features)]
debugSource("~/Documents/GAN_Paper/Code/gitrepo/Microarray_lasso/Hepatocellular Carcinoma Prepare.R", echo=TRUE)
length(features[!(features %in% tolower(as.vector(dat_exp[1])[[1]]) )]
)
source("~/Documents/GAN_Paper/Code/gitrepo/Microarray_lasso/Hepatocellular Carcinoma Prepare.R", echo=TRUE)
source("~/Documents/GAN_Paper/Code/gitrepo/Microarray_lasso/Hepatocellular Carcinoma Prepare.R", echo=TRUE)
debugSource("~/Documents/GAN_Paper/Code/gitrepo/Microarray_lasso/Hepatocellular Carcinoma Prepare.R", echo=TRUE)
debugSource("~/Documents/GAN_Paper/Code/gitrepo/Microarray_lasso/Hepatocellular Carcinoma Prepare.R", echo=TRUE)
#get sample information from GEO
dat_gsm <- getGEO(gsm, getGPL = TRUE)
dat_exp <- Table(dat_gsm)
#get sample information from GEO
dat_gsm <- getGEO(gsm, getGPL = TRUE)
dat_exp <- Table(dat_gsm)
if(dim(dat_exp)[1] == 0){ #ensure expression data is present
return(NULL)
}
#platform data for the sample from GEO (used to get gene names)
gpl <- Meta(dat_gsm)$platform_id
label <- Meta(dat_gsm)$characteristics_ch1[1]
dat_gpl <- Table(getGEO(gpl))
#get gene names from reference IDs if present, otherwise return NULL
col_gene_symbol_id <- c('orf', 'gene symbol', 'gene_symbol', 'ilmn_gene', 'genesymbol') #where gene symbols located
cols_keep <- c(1, which(tolower(colnames(dat_gpl)) %in% col_gene_symbol_id)) #convert all to lowercase to make matching columns more efficient
if (length(cols_keep) > 1){ #check if a gene names column was found
dat_gpl <- dat_gpl %>% select(all_of(cols_keep))
}
else{
#map reference IDs to gene names
dat_exp[1] <- plyr::mapvalues(as.vector(dat_exp[1])[[1]], from = as.vector(dat_gpl[1])[[1]], to =
as.vector(dat_gpl[2])[[1]], warn_missing = FALSE)
#check how many genes are missing from feature list inputted, and return NULL if too many
if (length(features) - length(features[!(features %in% tolower(as.vector(dat_exp[1])[[1]]) )]) > n_noFeature){
print(features[which( features %in% tolower(as.vector(dat_exp[1])[[1]]) )])
return(NULL)
}
#subset data for required features only
dat_exp <- dat_exp[which( tolower(as.vector(dat_exp[1])[[1]]) %in% features ) ,]
View(dat_gsm)
#get sample information from GEO
dat_gsm <- getGEO(gsm, getGPL = TRUE)
dat_exp <- Table(dat_gsm)
if(dim(dat_exp)[1] == 0){ #ensure expression data is present
return(NULL)
}
#platform data for the sample from GEO (used to get gene names)
gpl <- Meta(dat_gsm)$platform_id
label <- Meta(dat_gsm)$characteristics_ch1[1]
dat_gpl <- Table(getGEO(gpl))
#get gene names from reference IDs if present, otherwise return NULL
col_gene_symbol_id <- c('orf', 'gene symbol', 'gene_symbol', 'ilmn_gene', 'genesymbol') #where gene symbols located
cols_keep <- c(1, which(tolower(colnames(dat_gpl)) %in% col_gene_symbol_id)) #convert all to lowercase to make matching columns more efficient
if (length(cols_keep) > 1){ #check if a gene names column was found
dat_gpl <- dat_gpl %>% select(all_of(cols_keep))
}
dat_gpl <- dat_gpl %>% select(all_of(cols_keep))
View(dat_gpl)
#map reference IDs to gene names
dat_exp[1] <- plyr::mapvalues(as.vector(dat_exp[1])[[1]], from = as.vector(dat_gpl[1])[[1]], to =
as.vector(dat_gpl[2])[[1]], warn_missing = FALSE)
View(dat_exp)
#check how many genes are missing from feature list inputted, and return NULL if too many
if (length(features) - length(features[!(features %in% tolower(as.vector(dat_exp[1])[[1]]) )]) > n_noFeature){
print(features[which( features %in% tolower(as.vector(dat_exp[1])[[1]]) )])
return(NULL)
}
View(dat_exp)
which( tolower(as.vector(dat_exp[1])[[1]]) %in% features )
features
tolower(as.vector(dat_exp[1])[[1]])
debugSource("~/Documents/GAN_Paper/Code/gitrepo/Microarray_lasso/Hepatocellular Carcinoma Prepare.R", echo=TRUE)
setwd("~/Documents/GAN_Paper/Code/gitrepo/Microarray_lasso/")
library(tidyverse)
library(GEOquery)
library(foreach)
library(doParallel)
features <- readxl::read_xlsx("List of selected genes from GSE36376.xlsx") %>%
unlist() %>%
unname() %>%
tolower()
rm_features <- c("RGCC", "CDHR2", "NAXE", "DDX39A", "GARS1", "EPRS1", "UQCC2",
"hspb1", "akr1c3", "gba", "tomm6",
"rbm42", "hspb1", "phpt1", "spns1", "dcaf7", "prickle4", "dnajb11", "fat1", "gba", "med20", "srxn1", "irx3", "tomm6") %>%
tolower()
features <- features[!which(features %in% rm_features)]
!which(features %in% rm_features)
which(features %in% rm_features)
features <- readxl::read_xlsx("List of selected genes from GSE36376.xlsx") %>%
unlist() %>%
unname() %>%
tolower()
rm_features <- c("RGCC", "CDHR2", "NAXE", "DDX39A", "GARS1", "EPRS1", "UQCC2",
"hspb1", "akr1c3", "gba", "tomm6",
"rbm42", "hspb1", "phpt1", "spns1", "dcaf7", "prickle4", "dnajb11", "fat1", "gba", "med20", "srxn1", "irx3", "tomm6") %>%
tolower()
!which(features %in% rm_features)
which(features %in% rm_features)
features %in% rm_features
features <- features[!(features %in% rm_features)]
debugSource("~/Documents/GAN_Paper/Code/gitrepo/Microarray_lasso/Hepatocellular Carcinoma Prepare.R", echo=TRUE)
features <- readxl::read_xlsx("List of selected genes from GSE36376.xlsx") %>%
unlist() %>%
unname() %>%
tolower()
rm_features <- c("RGCC", "CDHR2", "NAXE", "DDX39A", "GARS1", "EPRS1", "UQCC2",
"hspb1", "akr1c3", "gba", "tomm6",
"rbm42", "hspb1", "phpt1", "spns1", "dcaf7", "prickle4", "dnajb11", "fat1", "gba", "med20", "srxn1", "irx3", "tomm6") %>%
tolower()
features <- features[!(features %in% rm_features)]
features
debugSource("~/Documents/GAN_Paper/Code/gitrepo/Microarray_lasso/Hepatocellular Carcinoma Prepare.R", echo=TRUE)
features
debugSource("~/Documents/GAN_Paper/Code/gitrepo/Microarray_lasso/Hepatocellular Carcinoma Prepare.R", echo=TRUE)
tolower(as.vector(dat_exp[1])[[1]]) )
tolower(as.vector(dat_exp[1])[[1]])
length(features[!(features %in% tolower(as.vector(dat_exp[1])[[1]]) )])
features %in% tolower(as.vector(dat_exp[1])[[1]])
source("~/Documents/GAN_Paper/Code/gitrepo/Microarray_lasso/Hepatocellular Carcinoma Prepare.R", echo=TRUE)
source("~/Documents/GAN_Paper/Code/gitrepo/Microarray_lasso/Hepatocellular Carcinoma Prepare.R", echo=TRUE)
##test
missing_ext['igfals',]
sum(is.na(dat_ext['igfals',]))
##test
missing_ext['igfals',]
sum(is.na(dat_ext['igfals',]))
missing_summary <- cbind(rownames(missing_real), missing_real, missing_ext, missing_val)
colnames(missing_summary) <- c('gene', 'real', 'ext', 'val')
missing_summary <- missing_summary %>% rowwise() %>% mutate(sum = sum(real+ext+val)) %>% select(gene, sum) %>% arrange(desc(sum))
print(missing_summary)
id_remove <- c(missing_summary[seq(1, 65), 1])$gene
print(paste(id_remove, collapse = ', '))
print(length(id_remove))
#label names
print(levels(dat_real$label))
print(levels(dat_val$label))
#tidy
dat_real <- dat_real %>% select(-all_of(id_remove)) %>% filter(label == 'tissue: liver tumor' | label == 'tissue: adjacent non-tumor liver')
#Get which genes to use
dat_real <- read_csv('dat_real_combo.csv', col_types = paste('cf', paste(rep('d', 200), collapse = ''), sep = '') )
dat_ext <- read_csv('dat_ext.csv', col_types = paste('cf', paste(rep('d', 200), collapse = ''), sep = '') )
dat_val <- read_csv('dat_val.csv', col_types = paste('cf', paste(rep('d', 200), collapse = ''), sep = '') )
View(dat_ext)
View(dat_real)
View(dat_val)
##check all na values are indeed na, not a string or something
##check igfals from the ext dat (an na got through here)
missing_real <- dat_real %>% select(-1, -2) %>% summarise(across(.cols = everything(), .fns = ~sum(is.na(.x)))) %>% t() %>% as.data.frame()
missing_ext <- dat_ext %>% select(-1, -2) %>% summarise(across(.cols = everything(), .fns = ~sum(is.na(.x)))) %>% t() %>% as.data.frame()
missing_val <- dat_val %>% select(-1, -2) %>% summarise(across(.cols = everything(), .fns = ~sum(is.na(.x)))) %>% t() %>% as.data.frame()
View(missing_ext)
##test
missing_ext['igfals',]
sum(is.na(dat_ext['igfals',]))
missing_summary <- cbind(rownames(missing_real), missing_real, missing_ext, missing_val)
View(missing_summary)
colnames(missing_summary) <- c('gene', 'real', 'ext', 'val')
missing_summary <- missing_summary %>% rowwise() %>% mutate(sum = sum(real+ext+val)) %>% select(gene, sum) %>% arrange(desc(sum))
print(missing_summary)
id_remove <- c(missing_summary[seq(1, 65), 1])$gene
View(missing_summary)
id_remove <- c(missing_summary[seq(1, 33), 1])$gene
print(paste(id_remove, collapse = ', '))
print(length(id_remove))
#label names
print(levels(dat_real$label))
print(levels(dat_val$label))
#tidy
dat_real <- dat_real %>% filter(label == 'tissue: liver tumor' | label == 'tissue: adjacent non-tumor liver')
dat_val <- dat_val %>% filter(label == "tissue: tumor liver" | label == "tissue: non_tumor liver")
dat_ext <- dat_ext %>% select(-1)
#change label names
print(levels(dat_real$label))
print(levels(dat_val$label))
View(dat_real)
View(missing_val)
View(dat_ext)
#Get which genes to use
dat_real <- read_csv('dat_real_combo.csv', col_types = paste('cf', paste(rep('d', 200), collapse = ''), sep = '') )
dat_ext <- read_csv('dat_ext.csv', col_types = paste('cf', paste(rep('d', 200), collapse = ''), sep = '') )
dat_val <- read_csv('dat_val.csv', col_types = paste('cf', paste(rep('d', 200), collapse = ''), sep = '') )
##check all na values are indeed na, not a string or something
##check igfals from the ext dat (an na got through here)
missing_real <- dat_real %>% select(-1, -2) %>% summarise(across(.cols = everything(), .fns = ~sum(is.na(.x)))) %>% t() %>% as.data.frame()
missing_ext <- dat_ext %>% select(-1, -2) %>% summarise(across(.cols = everything(), .fns = ~sum(is.na(.x)))) %>% t() %>% as.data.frame()
missing_val <- dat_val %>% select(-1, -2) %>% summarise(across(.cols = everything(), .fns = ~sum(is.na(.x)))) %>% t() %>% as.data.frame()
##test
missing_ext['igfals',]
sum(is.na(dat_ext['igfals',]))
missing_summary <- cbind(rownames(missing_real), missing_real, missing_ext, missing_val)
colnames(missing_summary) <- c('gene', 'real', 'ext', 'val')
missing_summary <- missing_summary %>% rowwise() %>% mutate(sum = sum(real+ext+val)) %>% select(gene, sum) %>% arrange(desc(sum))
print(missing_summary)
#label names
print(levels(dat_real$label))
print(levels(dat_val$label))
#tidy
dat_real <- dat_real %>% filter(label == 'tissue: liver tumor' | label == 'tissue: adjacent non-tumor liver')
dat_val <- dat_val %>% filter(label == "tissue: tumor liver" | label == "tissue: non_tumor liver")
dat_ext <- dat_ext %>% select(-1)
#change label names
print(levels(dat_real$label))
print(levels(dat_val$label))
##need to explicilty state which labels == which
levels(dat_real$label) <- plyr::revalue(dat_real$label, c('tissue: liver tumor' = 'case', 'tissue: adjacent non-tumor liver' = 'control'))
levels(dat_val$label) <- plyr::revalue(dat_val$label, c("tissue: non_tumor liver" = 'control',
"tissue: tumor liver" = 'case',
"tissue: cirrhotic liver" = 'NA',
"tissue: healthy liver" = 'NA2'))
write.csv(dat_real, 'dat_real_combo.csv')
write.csv(dat_val, 'dat_val.csv')
write.csv(dat_ext, 'dat_ext.csv')
#Get data ready for each experiment
dat_combo <- read_csv('dat_real_combo.csv', col_types = paste('ccf', paste(rep('d', 200), collapse = ''), sep = '') ) %>% select(-1)
summary(dat_combo$label)
icesTAF::mkdir(c('1a', '1b', '1c',
'2a', '2b', '2c',
'3a', '3b', '3c',
'4a', '4b', '4c',
'5a', '5b', '5c',
'6a', '6b', '6c',
'7a', '7b', '7c',
'8a', '8b', '8c',
'9a', '9b', '9c'))
for(i in seq(1, 9, 1)){
dir1 = paste(as.character(i), 'a', sep = '')
dir2 = paste(as.character(i), 'b', sep = '')
dir3 = paste(as.character(i), 'c', sep = '')
if(i == 1){
class_imbal <- 0.4
n_control <- 40
}
if(i == 2){
class_imbal <- 0.4
n_control <- 80
}
if(i == 3){
class_imbal <- 0.4
n_control <- 120
}
if(i == 4){
class_imbal <- 0.5
n_control <- 40
}
if(i == 5){
class_imbal <- 0.5
n_control <- 80
}
if(i == 6){
class_imbal <- 0.5
n_control <- 120
}
if(i == 7){
class_imbal <- 0.6
n_control <- 40
}
if(i == 8){
class_imbal <- 0.6
n_control <- 80
}
if(i == 9){
class_imbal <- 0.6
n_control <- 120
}
set.seed(200)
dat_under <- dat_combo %>% filter(label == 'case') %>% sample_n( n_control*class_imbal )
dat_over <- dat_combo %>% filter(label == 'control') %>% sample_n( n_control )
write_csv(dat_under, paste(dir1, 'dat_real_class1.csv', sep = '/'))
write_csv(dat_over, paste(dir1, 'dat_real_class2.csv', sep = '/'))
dat_under %>% add_row(dat_over) %>% write_csv(paste(dir1, 'dat_real_combo.csv', sep = '/'))
write_csv(dat_under, paste(dir2, 'dat_real_class1.csv', sep = '/'))
write_csv(dat_over, paste(dir2, 'dat_real_class2.csv', sep = '/'))
dat_under %>% add_row(dat_over) %>% write_csv(paste(dir2, 'dat_real_combo.csv', sep = '/'))
write_csv(dat_under, paste(dir3, 'dat_real_class1.csv', sep = '/'))
write_csv(dat_over, paste(dir3, 'dat_real_class2.csv', sep = '/'))
dat_under %>% add_row(dat_over) %>% write_csv(paste(dir3, 'dat_real_combo.csv', sep = '/'))
}
