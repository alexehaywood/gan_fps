if(i == 9){
class_imbal <- 0.6
n_control <- 120
}
set.seed(42)
n_samples <- 400
n_class2 <- n_control
n_class1 <- class_imbal*n_class2
dat <- generate_samples(ce, n_features, n_samples)
dat_x <- as_tibble(dat$counts)
dat_y <- dat$clinical %>% select(1)
ind_class1 <- which(dat_y == 1) %>% sample(n_class1)
dat_class1 <- dat_x[ind_class1, ]
ind_class2 <- which(dat_y == 2) %>% sample(n_class2)
dat_class2 <- dat_x[ind_class2, ]
dat_combo <- rbind(dat_class1 %>% mutate('CancerSubType' = 'class_1', .before = V1), dat_class2 %>% mutate('CancerSubType' = 'class_2', .before = V1))
write_csv(dat_class1, dir1 + '/sim_dat_real_class1.csv')
write_csv(dat_class2, dir1+'sim_dat_real_class2.csv')
write_csv(dat_combo, dir1+'sim_dat_real_combo.csv')
write_csv(dat_class1, dir2+'sim_dat_real_class1.csv')
write_csv(dat_class2, dir2+'sim_dat_real_class2.csv')
write_csv(dat_combo, dir2+'sim_dat_real_combo.csv')
write_csv(dat_class1, dir3+'sim_dat_real_class1.csv')
write_csv(dat_class2, dir3+'sim_dat_real_class2.csv')
write_csv(dat_combo, dir3+'sim_dat_real_combo.csv')
}
icesTAF::mkdir(c('1a', '1b', '1c',
'2a', '2b', '2c',
'3a', '3b', '3c',
'4a', '4b', '4c',
'5a', '5b', '5c',
'6a', '6b', '6c',
'7a', '7b', '7c',
'8a', '8b', '8c',
'9a', '9b', '9c'))
for(i in seq(1, 9, 1)){
dir1 = paste(as.character(i), 'a', sep = '')
dir2 = paste(as.character(i), 'b', sep = '')
dir3 = paste(as.character(i), 'c', sep = '')
if(i == 1){
class_imbal <- 0.4
n_control <- 40
}
if(i == 2){
class_imbal <- 0.4
n_control <- 80
}
if(i == 3){
class_imbal <- 0.4
n_control <- 120
}
if(i == 4){
class_imbal <- 0.5
n_control <- 40
}
if(i == 5){
class_imbal <- 0.5
n_control <- 80
}
if(i == 6){
class_imbal <- 0.5
n_control <- 120
}
if(i == 7){
class_imbal <- 0.6
n_control <- 40
}
if(i == 8){
class_imbal <- 0.6
n_control <- 80
}
if(i == 9){
class_imbal <- 0.6
n_control <- 120
}
set.seed(42)
n_samples <- 400
n_class2 <- n_control
n_class1 <- class_imbal*n_class2
dat <- generate_samples(ce, n_features, n_samples)
dat_x <- as_tibble(dat$counts)
dat_y <- dat$clinical %>% select(1)
ind_class1 <- which(dat_y == 1) %>% sample(n_class1)
dat_class1 <- dat_x[ind_class1, ]
ind_class2 <- which(dat_y == 2) %>% sample(n_class2)
dat_class2 <- dat_x[ind_class2, ]
dat_combo <- rbind(dat_class1 %>% mutate('CancerSubType' = 'class_1', .before = V1), dat_class2 %>% mutate('CancerSubType' = 'class_2', .before = V1))
write_csv(dat_class1, paste(dir1, '/sim_dat_real_class1.csv', sep = ''))
write_csv(dat_class2, paste(dir1, 'sim_dat_real_class2.csv', sep = ''))
write_csv(dat_combo, paste(dir1,'sim_dat_real_combo.csv', sep = ''))
write_csv(dat_class1, paste(dir2, '/sim_dat_real_class1.csv', sep = ''))
write_csv(dat_class2, paste(dir2, 'sim_dat_real_class2.csv', sep = ''))
write_csv(dat_combo, paste(dir2,'sim_dat_real_combo.csv', sep = ''))
write_csv(dat_class1, paste(dir3, '/sim_dat_real_class1.csv', sep = ''))
write_csv(dat_class2, paste(dir3, 'sim_dat_real_class2.csv', sep = ''))
write_csv(dat_combo, paste(dir3,'sim_dat_real_combo.csv', sep = ''))
}
set.seed(43)
n_samples <- 1000
n_val <- 700
n_ext <- 300
dat <- generate_samples(ce, n_features, n_samples)
dat_x <- as_tibble(dat$counts)
dat_y <- dat$clinical %>% select(1)
ind_extVal <- seq(1, n_samples, 1)
dat_val <- cbind('CancerSubType' = dat_y[ind_extVal[seq(1,n_val)], ], dat_x[ind_extVal[seq(1:n_val)], ])
dat_ext <- dat_x[ind_extVal[ seq(n_val+1, n_ext+n_val) ], ]
write_csv(dat_ext, 'sim_dat_ext.csv')
write_csv(dat_val, 'sim_dat_val.csv')
icesTAF::mkdir(c('1a', '1b', '1c',
'2a', '2b', '2c',
'3a', '3b', '3c',
'4a', '4b', '4c',
'5a', '5b', '5c',
'6a', '6b', '6c',
'7a', '7b', '7c',
'8a', '8b', '8c',
'9a', '9b', '9c'))
for(i in seq(1, 9, 1)){
dir1 = paste(as.character(i), 'a', sep = '')
dir2 = paste(as.character(i), 'b', sep = '')
dir3 = paste(as.character(i), 'c', sep = '')
if(i == 1){
class_imbal <- 0.4
n_control <- 40
}
if(i == 2){
class_imbal <- 0.4
n_control <- 80
}
if(i == 3){
class_imbal <- 0.4
n_control <- 120
}
if(i == 4){
class_imbal <- 0.5
n_control <- 40
}
if(i == 5){
class_imbal <- 0.5
n_control <- 80
}
if(i == 6){
class_imbal <- 0.5
n_control <- 120
}
if(i == 7){
class_imbal <- 0.6
n_control <- 40
}
if(i == 8){
class_imbal <- 0.6
n_control <- 80
}
if(i == 9){
class_imbal <- 0.6
n_control <- 120
}
set.seed(42)
n_samples <- 400
n_class2 <- n_control
n_class1 <- class_imbal*n_class2
dat <- generate_samples(ce, n_features, n_samples)
dat_x <- as_tibble(dat$counts)
dat_y <- dat$clinical %>% select(1)
ind_class1 <- which(dat_y == 1) %>% sample(n_class1)
dat_class1 <- dat_x[ind_class1, ]
ind_class2 <- which(dat_y == 2) %>% sample(n_class2)
dat_class2 <- dat_x[ind_class2, ]
dat_combo <- rbind(dat_class1 %>% mutate('CancerSubType' = 'class_1', .before = V1), dat_class2 %>% mutate('CancerSubType' = 'class_2', .before = V1))
write_csv(dat_class1, paste(dir1, '/sim_dat_real_class1.csv', sep = ''))
write_csv(dat_class2, paste(dir1, '/sim_dat_real_class2.csv', sep = ''))
write_csv(dat_combo, paste(dir1,'/sim_dat_real_combo.csv', sep = ''))
write_csv(dat_class1, paste(dir2, '/sim_dat_real_class1.csv', sep = ''))
write_csv(dat_class2, paste(dir2, '/sim_dat_real_class2.csv', sep = ''))
write_csv(dat_combo, paste(dir2,'/sim_dat_real_combo.csv', sep = ''))
write_csv(dat_class1, paste(dir3, '/sim_dat_real_class1.csv', sep = ''))
write_csv(dat_class2, paste(dir3, '/sim_dat_real_class2.csv', sep = ''))
write_csv(dat_combo, paste(dir3,'/sim_dat_real_combo.csv', sep = ''))
}
set.seed(43)
n_samples <- 1000
n_val <- 700
n_ext <- 300
dat <- generate_samples(ce, n_features, n_samples)
dat_x <- as_tibble(dat$counts)
dat_y <- dat$clinical %>% select(1)
ind_extVal <- seq(1, n_samples, 1)
dat_val <- cbind('CancerSubType' = dat_y[ind_extVal[seq(1,n_val)], ], dat_x[ind_extVal[seq(1:n_val)], ])
dat_ext <- dat_x[ind_extVal[ seq(n_val+1, n_ext+n_val) ], ]
write_csv(dat_ext, 'sim_dat_ext.csv')
write_csv(dat_val, 'sim_dat_val.csv')
knitr::opts_chunk$set(
root.dir = '~/Documents/Work/GAN_Paper/GAN_Data/Simulation_example/'
)
library(tidyverse)
library(ggplot2)
library(Umpire)
generate_samples <- function(ce, n_features, n_samples){
ce_noise <- ClinicalNoiseModel(n_features, 2, 0.5)
dat <- rand(ce, n_samples)
dat_counts <- blur(ce_noise, dat$data)
dat_counts <- as.data.frame(t(dat_counts))
dat_clinical <- dat$clinical
return(list('counts' = dat_counts, 'clinical' = dat_clinical))
}
ggplot() +
stat_function(fun = dgamma, args = list(shape = 2, scale = 0.5)) +
labs(x = 'Added Noise', y = 'Probability Density') +
xlim(0, 5)
set.seed(1)
n_features <- 150
ce <- ClinicalEngine(n_features, 2, isWeighted = TRUE)
icesTAF::mkdir(c('1a', '1b', '1c',
'2a', '2b', '2c',
'3a', '3b', '3c',
'4a', '4b', '4c',
'5a', '5b', '5c',
'6a', '6b', '6c',
'7a', '7b', '7c',
'8a', '8b', '8c',
'9a', '9b', '9c'))
for(i in seq(1, 9, 1)){
dir1 = paste(as.character(i), 'a', sep = '')
dir2 = paste(as.character(i), 'b', sep = '')
dir3 = paste(as.character(i), 'c', sep = '')
if(i == 1){
class_imbal <- 0.4
n_control <- 40
}
if(i == 2){
class_imbal <- 0.4
n_control <- 80
}
if(i == 3){
class_imbal <- 0.4
n_control <- 120
}
if(i == 4){
class_imbal <- 0.5
n_control <- 40
}
if(i == 5){
class_imbal <- 0.5
n_control <- 80
}
if(i == 6){
class_imbal <- 0.5
n_control <- 120
}
if(i == 7){
class_imbal <- 0.6
n_control <- 40
}
if(i == 8){
class_imbal <- 0.6
n_control <- 80
}
if(i == 9){
class_imbal <- 0.6
n_control <- 120
}
set.seed(42)
n_samples <- 400
n_class2 <- n_control
n_class1 <- class_imbal*n_class2
dat <- generate_samples(ce, n_features, n_samples)
dat_x <- as_tibble(dat$counts)
dat_y <- dat$clinical %>% select(1)
ind_class1 <- which(dat_y == 1) %>% sample(n_class1)
dat_class1 <- dat_x[ind_class1, ]
ind_class2 <- which(dat_y == 2) %>% sample(n_class2)
dat_class2 <- dat_x[ind_class2, ]
dat_combo <- rbind(dat_class1 %>% mutate('CancerSubType' = 'class_1', .before = V1), dat_class2 %>% mutate('CancerSubType' = 'class_2', .before = V1))
write_csv(dat_class1, paste(dir1, '/dat_real_class1.csv', sep = ''))
write_csv(dat_class2, paste(dir1, '/dat_real_class2.csv', sep = ''))
write_csv(dat_combo, paste(dir1,'/dat_real_combo.csv', sep = ''))
write_csv(dat_class1, paste(dir2, '/dat_real_class1.csv', sep = ''))
write_csv(dat_class2, paste(dir2, '/dat_real_class2.csv', sep = ''))
write_csv(dat_combo, paste(dir2,'/dat_real_combo.csv', sep = ''))
write_csv(dat_class1, paste(dir3, '/dat_real_class1.csv', sep = ''))
write_csv(dat_class2, paste(dir3, '/dat_real_class2.csv', sep = ''))
write_csv(dat_combo, paste(dir3,'/dat_real_combo.csv', sep = ''))
}
set.seed(43)
n_samples <- 1000
n_val <- 700
n_ext <- 300
dat <- generate_samples(ce, n_features, n_samples)
dat_x <- as_tibble(dat$counts)
dat_y <- dat$clinical %>% select(1)
ind_extVal <- seq(1, n_samples, 1)
dat_val <- cbind('CancerSubType' = dat_y[ind_extVal[seq(1,n_val)], ], dat_x[ind_extVal[seq(1:n_val)], ])
dat_ext <- dat_x[ind_extVal[ seq(n_val+1, n_ext+n_val) ], ]
write_csv(dat_ext, 'dat_ext.csv')
write_csv(dat_val, 'dat_val.csv')
knitr::opts_chunk$set(
root.dir = '~/Documents/Work/GAN_Paper/GAN_Data/Simulation_example/'
)
library(tidyverse)
library(ggplot2)
library(Umpire)
generate_samples <- function(ce, n_features, n_samples){
ce_noise <- ClinicalNoiseModel(n_features, 2, 0.5)
dat <- rand(ce, n_samples)
dat_counts <- blur(ce_noise, dat$data)
dat_counts <- as.data.frame(t(dat_counts))
dat_clinical <- dat$clinical
return(list('counts' = dat_counts, 'clinical' = dat_clinical))
}
ggplot() +
stat_function(fun = dgamma, args = list(shape = 2, scale = 0.5)) +
labs(x = 'Added Noise', y = 'Probability Density') +
xlim(0, 5)
set.seed(1)
n_features <- 150
ce <- ClinicalEngine(n_features, 2, isWeighted = TRUE)
set.seed(43)
n_samples <- 1000
n_val <- 700
n_ext <- 300
dat <- generate_samples(ce, n_features, n_samples)
dat_x <- as_tibble(dat$counts)
dat_y <- dat$clinical %>% select(1)
ind_extVal <- seq(1, n_samples, 1)
dat_val <- cbind('CancerSubType' = dat_y[ind_extVal[seq(1,n_val)], ], dat_x[ind_extVal[seq(1:n_val)], ])
View(dat_val)
View(dat_y)
View(dat)
View(dat_y)
class(dat_y[1])
class(dat_y[1][1])
View(dat_y)
class(dat_y[1,1])
icesTAF::mkdir(c('1a', '1b', '1c',
'2a', '2b', '2c',
'3a', '3b', '3c',
'4a', '4b', '4c',
'5a', '5b', '5c',
'6a', '6b', '6c',
'7a', '7b', '7c',
'8a', '8b', '8c',
'9a', '9b', '9c'))
for(i in seq(1, 9, 1)){
dir1 = paste(as.character(i), 'a', sep = '')
dir2 = paste(as.character(i), 'b', sep = '')
dir3 = paste(as.character(i), 'c', sep = '')
if(i == 1){
class_imbal <- 0.4
n_control <- 40
}
if(i == 2){
class_imbal <- 0.4
n_control <- 80
}
if(i == 3){
class_imbal <- 0.4
n_control <- 120
}
if(i == 4){
class_imbal <- 0.5
n_control <- 40
}
if(i == 5){
class_imbal <- 0.5
n_control <- 80
}
if(i == 6){
class_imbal <- 0.5
n_control <- 120
}
if(i == 7){
class_imbal <- 0.6
n_control <- 40
}
if(i == 8){
class_imbal <- 0.6
n_control <- 80
}
if(i == 9){
class_imbal <- 0.6
n_control <- 120
}
set.seed(42)
n_samples <- 400
n_class2 <- n_control
n_class1 <- class_imbal*n_class2
dat <- generate_samples(ce, n_features, n_samples)
dat_x <- as_tibble(dat$counts)
dat_y <- dat$clinical %>% select(1)
ind_class1 <- which(dat_y == 1) %>% sample(n_class1)
dat_class1 <- dat_x[ind_class1, ]
ind_class2 <- which(dat_y == 2) %>% sample(n_class2)
dat_class2 <- dat_x[ind_class2, ]
dat_combo <- rbind(dat_class1 %>% mutate('CancerSubType' = 1, .before = V1), dat_class2 %>% mutate('CancerSubType' = 2, .before = V1))
write_csv(dat_class1, paste(dir1, '/dat_real_class1.csv', sep = ''))
write_csv(dat_class2, paste(dir1, '/dat_real_class2.csv', sep = ''))
write_csv(dat_combo, paste(dir1,'/dat_real_combo.csv', sep = ''))
write_csv(dat_class1, paste(dir2, '/dat_real_class1.csv', sep = ''))
write_csv(dat_class2, paste(dir2, '/dat_real_class2.csv', sep = ''))
write_csv(dat_combo, paste(dir2,'/dat_real_combo.csv', sep = ''))
write_csv(dat_class1, paste(dir3, '/dat_real_class1.csv', sep = ''))
write_csv(dat_class2, paste(dir3, '/dat_real_class2.csv', sep = ''))
write_csv(dat_combo, paste(dir3,'/dat_real_combo.csv', sep = ''))
}
set.seed(43)
n_samples <- 1000
n_val <- 700
n_ext <- 300
dat <- generate_samples(ce, n_features, n_samples)
dat_x <- as_tibble(dat$counts)
dat_y <- dat$clinical %>% select(1)
ind_extVal <- seq(1, n_samples, 1)
dat_val <- cbind('CancerSubType' = dat_y[ind_extVal[seq(1,n_val)], ], dat_x[ind_extVal[seq(1:n_val)], ])
dat_ext <- dat_x[ind_extVal[ seq(n_val+1, n_ext+n_val) ], ]
write_csv(dat_ext, 'dat_ext.csv')
write_csv(dat_val, 'dat_val.csv')
source("~/Documents/Work/GAN_Paper/Code/metabolomics_prep.R", echo=TRUE)
View(dat_val)
source("~/Documents/Work/GAN_Paper/Code/metabolomics_prep.R", echo=TRUE)
source("~/Documents/Work/GAN_Paper/Code/metabolomics_prep.R", echo=TRUE)
View(dat_train)
library(tidyverse)
library(ggplot2)
setwd('/home/samuel/Documents/Work/GAN_Paper/Code/GAN_Data/Metabolomics/Prep2/')
dat_train <- openxlsx::read.xlsx('metabolomics_example.xlsx', sheet = 1)
dat_ext <- openxlsx::read.xlsx('metabolomics_example.xlsx', sheet = 2)
dat_val <- openxlsx::read.xlsx('metabolomics_example.xlsx', sheet = 3)
colnames(dat_train)[2] <- 'label'
colnames(dat_ext)[2] <- 'label'
colnames(dat_val)[2] <- 'label'
dat_train <- dat_train %>% select(-1)
dat_ext <- dat_ext %>% select(-1)
dat_val <- dat_val %>% select(-1)
sum(colnames(dat_train) == colnames(dat_ext))
sum(colnames(dat_train) == colnames(dat_val))
unique(dat_train$label)
unique(dat_ext$label)
unique(dat_val$label)
#make 2 class (excluding external data)
dat_train <- dat_train %>% filter(label == 'Formula' | label == 'HM')
dat_val <- dat_val %>% filter(label == 'Formula' | label == 'HM')
check_na <- function(x){ which( sum(is.na(x))>0 )}
dat_train %>% apply(1, check_na)
dat_ext %>% apply(1, check_na)
dat_val %>% apply(1, check_na)
summary(as.factor(dat_train$label))
summary(as.factor(dat_ext$label))
summary(as.factor(dat_val$label))
#make unbalance in training data
set.seed(117)
n_over <- sum(dat_train$label == 'Formula')
dat_train_under <- dat_train %>% filter(label == 'HM') %>% sample_n(floor(n_over*0.6))
dat_train <- dat_train %>% filter(label == 'Formula') %>% add_row(dat_train_under)
summary(as.factor(dat_train$label))
summary(as.factor(dat_val$label))
View(dat_train)
#change factor values
dat_train$label = as.factor(dat_train$label)
dat_val$label = as.factor(dat_val$label)
View(dat_train)
plyr::revalue(dat_train$label, c('HM' = 'case', 'Formula' = 'control'))
levels(dat_train$label) <- plyr::revalue(dat_train$label, c('HM' = 'case', 'Formula' = 'control'))
levels(dat_val$label) <- plyr::revalue(dat_val$label, c('HM' = 'case', 'Formula' = 'control'))
View(dat_val)
View(dat_train)
source("~/Documents/Work/GAN_Paper/Code/metabolomics_prep.R", echo=TRUE)
library(tidyverse)
library(ggplot2)
setwd('/home/samuel/Documents/Work/GAN_Paper/Code/GAN_Data/Metabolomics/Prep2/')
dat_train <- openxlsx::read.xlsx('metabolomics_example.xlsx', sheet = 1)
dat_ext <- openxlsx::read.xlsx('metabolomics_example.xlsx', sheet = 2)
dat_val <- openxlsx::read.xlsx('metabolomics_example.xlsx', sheet = 3)
colnames(dat_train)[2] <- 'label'
colnames(dat_ext)[2] <- 'label'
colnames(dat_val)[2] <- 'label'
dat_train <- dat_train %>% select(-1)
dat_ext <- dat_ext %>% select(-1)
dat_val <- dat_val %>% select(-1)
sum(colnames(dat_train) == colnames(dat_ext))
sum(colnames(dat_train) == colnames(dat_val))
unique(dat_train$label)
unique(dat_ext$label)
unique(dat_val$label)
#make 2 class (excluding external data)
dat_train <- dat_train %>% filter(label == 'Formula' | label == 'HM')
dat_val <- dat_val %>% filter(label == 'Formula' | label == 'HM')
check_na <- function(x){ which( sum(is.na(x))>0 )}
dat_train %>% apply(1, check_na)
dat_ext %>% apply(1, check_na)
dat_val %>% apply(1, check_na)
summary(as.factor(dat_train$label))
summary(as.factor(dat_ext$label))
summary(as.factor(dat_val$label))
#make unbalance in training data
set.seed(117)
n_over <- sum(dat_train$label == 'Formula')
dat_train_under <- dat_train %>% filter(label == 'HM') %>% sample_n(floor(n_over*0.6))
dat_train <- dat_train %>% filter(label == 'Formula') %>% add_row(dat_train_under)
summary(as.factor(dat_train$label))
summary(as.factor(dat_val$label))
#change factor values
dat_train$label <- as.factor(dat_train$label)
dat_val$label <- as.factor(dat_val$label)
View(dat_train)
plyr::revalue(dat_val$label, c('HM' = 'case', 'Formula' = 'control'))
plyr::revalue(dat_train$label, c('HM' = 'case', 'Formula' = 'control'))
levels(dat_train$label)
levels(dat_val$label)
dat_train$label <- plyr::revalue(dat_train$label, c('HM' = 'case', 'Formula' = 'control'))
View(dat_train)
source("~/Documents/Work/GAN_Paper/Code/metabolomics_prep.R", echo=TRUE)
